<?php

namespace App\Http\Controllers\Api\V1;

use Illuminate\Routing\Controllers\HasMiddleware;
use App\Http\Requests\Api\V1\UpdatePostRequest;
use App\Http\Requests\Api\V1\StorePostRequest;
use Illuminate\Routing\Controllers\Middleware;
use App\Http\Resources\Api\V1\PostResource;
use App\Http\Controllers\Api\ApiController;
use App\Http\Filters\V1\PostFilter;
use App\Policies\V1\PostPolicy;
use App\Models\Post;


class PostController extends ApiController implements HasMiddleware
{

    protected $policyClass = PostPolicy::class;

    /**
     * Get the middleware that should be assigned to the controller.
     */
    public static function middleware(): array
    {
        return [
            new Middleware('auth:sanctum', except: ['index', 'show'])
        ];
    }

    /**
     * Get all posts
     * 
     * Get all posts with sort, filter or include option
     * 
     * @group Post
     * 
     * @queryParam sort string Data field(s). Example: sort=title,-status
     * @queryParam filter[title] Filter by title. Wildcards are supported. Example: title=*fix*
     * @queryParam filter[status] Filter by status code: A,D,X. No-example
     * @queryParam filter[createdAt] Filter by created_at. No-example
     * @queryParam filter[updatedAt] Filter by updated_at. No-example
     * 
     * @queryParam include related author. Example: include=author
     *  
     */
    public function index(PostFilter $filters)
    {
        return PostResource::collection(Post::filter($filters)->paginate());
    }


    /**
     * Create post
     * 
     * Only users with permission store:post can create posts (roles: author, admin)
     * 
     * @authenticated
     * @group Post 
     * @response 200{
    "data": {
        "type": "post",
        "id": {autoIncrementId},
        "attributes": {
            "title": "{data.title}",
            "status": "{data.status}",
            "content": "{data.content}",
            "createdAt": "{autoGenerated}",
            "updatedAt": "{autoGenerated}"
        },
        "relationships": {
            "author": {
                "data": {
                    "type": "user",
                    "id": {AuthParam}
                },
                "links": {
                    "self": "http://localhost/api/v1/authors/{userParamId}"
                }
            }
        },
        "links": {
            "self": "http://localhost/api/v1/posts/{autoIncrementId}"
        }
    }
}
     */
    public function store(StorePostRequest $request)
    {

        $this->isAble('store', Post::class);

        return new PostResource(Post::create($request->mappedAttributes()));
    }

    /**
     * Get post details by id
     *
     * 
     * @group Post
     */
    public function show(Post $post)
    {
        return new PostResource($post->load('author'));
    }

    /**
     * Update the post.
     * 
     * Only Users with permissions post:update and post:own:update can update the post (roles: author, admin) 
     * 
     * @authenticated
     * @group Post
     * @response 200{
    "data": {
        "type": "post",
        "id": {autoIncrementId},
        "attributes": {
            "title": "{data.title}",
            "status": "{data.status}",
            "content": "{data.content}",
            "createdAt": "{autoGenerated}",
            "updatedAt": "{autoGenerated}"
        },
        "relationships": {
            "author": {
                "data": {
                    "type": "user",
                    "id": {AuthParam}
                },
                "links": {
                    "self": "http://localhost/api/v1/authors/{userParamId}"
                }
            }
        },
        "links": {
            "self": "http://localhost/api/v1/posts/{autoIncrementId}"
        }
    }
}
     */
    public function update(UpdatePostRequest $request, Post $post)
    {
        $this->isAble('update', $post);

        $post->update($request->mappedAttributes());

        return new PostResource($post->load('author'));
    }

    /**
     * Delete the post.
     * 
     * Only Users with permissions post:delete and post:own:delete can delete the post (roles: author, admin) 
     * 
     * @authenticated
     * @group Post
     * @response 200
     */
    public function destroy(Post $post)
    {
        $this->isAble('delete', $post);

        $post->delete();

        return $this->ok('');
    }
}
