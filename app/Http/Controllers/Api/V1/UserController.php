<?php

namespace App\Http\Controllers\Api\V1;

use App\Http\Requests\Api\V1\UpdateUserRequest;
use App\Http\Requests\Api\V1\StoreUserRequest;
use App\Http\Resources\Api\V1\UserResource;
use App\Http\Controllers\Api\ApiController;
use App\Http\Filters\V1\UserFilter;
use App\Policies\V1\UserPolicy;
use App\Models\User;


class UserController extends ApiController
{

    protected $policyClass = UserPolicy::class;

    /**
     * Get all users.
     * 
     * Retrieve all users allowed only for role:admin
     *
     * @authenticated
     * @group User
     * 
     * @queryParam sort string Data field(s). Example: name,-role 
     * @queryParam filter[id] Filter by id. No-example
     * @queryParam filter[name] Filter by name. No-example
     * @queryParam filter[email] Filter by email. No-example
     * @queryParam filter[createdAt] Filter by created_at. No-example
     * @queryParam filter[updatedAt] Filter by updated_at. No-example
     * @queryParam filter[role] Filter by role. Roles: user,author,admin. No-example
     * @queryParam filter[isAdmin] Filter by is_admin. No-example
     */
    public function index(UserFilter $filters)
    {

        $this->isAble('index', User::class);

        return UserResource::collection(User::filter($filters)->paginate());
    }

    /**
     * Create User
     * 
     * Create a user and assign a role. Only allowed for admin users
     * 
     * @authenticated
     * @group User
     * 
     * @response 200 {
     "data": {
        "type": "user",
        "id": "{autoIncrementId}",
        "attributes": {
            "name": "{data.name}",
            "email": "{data.email}",
            "role": "{data.role}",
            "isAdmin" : "{data.is_admin}",
            "emailVerifiedAt" : "{autoGenerated}",
            "createdAt" : "{autoGenerated}",
            "updatedAt" : "{autoGenerated}"
         },
        "includes": [],
        "links": {
            "self": "http://localhost/api/v1/users/{UserId}"
        }
    }
}
     */
    public function store(StoreUserRequest $request)
    {
        $this->isAble('store', User::class);

        return new UserResource(User::create($request->mappedAttributes()));
    }

    /**
     * Get a specific User by id.
     * 
     * @authenticated
     * @group User
     * 
     *@response 200 {
     "data": {
        "type": "user",
        "id": "{autoIncrementId}",
        "attributes": {
            "name": "{data.name}",
            "email": "{data.email}",
            "role": "{data.role}",
            "isAdmin" : "{data.is_admin}",
            "emailVerifiedAt" : "{autoGenerated}",
            "createdAt" : "{autoGenerated}",
            "updatedAt" : "{autoGenerated}"
         },
        "includes": ["{PostResourceCollection}"],
        "links": {
            "self": "http://localhost/api/v1/users/{UserId}"
        }
    }
}
     */
    public function show(User $user)
    {
        $this->isAble('show', $user);

        return new UserResource($user->load('posts'));
    }

    /**
     * Update User.
     * 
     * Update user details. Only allowed to users with admin permissions
     * 
     * @authenticated
     * @group User
     * @response 200 {
     "data": {
        "type": "user",
        "id": "{autoIncrementId}",
        "attributes": {
            "name": "{data.name}",
            "email": "{data.email}",
            "role": "{data.role}",
            "isAdmin" : "{data.is_admin}",
            "emailVerifiedAt" : "{autoGenerated}",
            "createdAt" : "{autoGenerated}",
            "updatedAt" : "{autoGenerated}"
         },
        "includes": ["{PostResourceCollection}"],
        "links": {
            "self": "http://localhost/api/v1/users/{UserId}"
        }
    }
}
     */
    public function update(UpdateUserRequest $request, User $user)
    {
        $this->isAble('update', $user);

        $user->update($request->mappedAttributes());

        return new UserResource($user->load('posts'));
    }

    /**
     * Delete User by id
     * 
     * Delete specific User, only allowed to users with admin permissions
     * 
     * @authenticated
     * @group User
     * @response 200 {}
     */
    public function destroy(User $user)
    {
        $this->isAble('delete', $user);

        $user->delete();

        return $this->ok('');
    }
}
